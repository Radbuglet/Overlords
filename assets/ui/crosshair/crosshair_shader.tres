[gd_resource type="ShaderMaterial" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeTexture" id=1]
source = 2

[sub_resource type="VisualShaderNodeVectorOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=3]
source = 1

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id=5]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeColorFunc" id=6]

[sub_resource type="VisualShader" id=7]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:7
	vec3 n_out7p0 = vec3(SCREEN_UV, 0.0);

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = textureLod(SCREEN_TEXTURE, n_out7p0.xy, 0.0);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// VectorOp:8
	vec3 n_in8p0 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out8p0 = n_in8p0 - n_out5p0;

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// VectorOp:3
	vec3 n_out3p0 = n_out8p0 * n_out2p0;

// ColorFunc:9
	vec3 n_out9p0;
	{
		vec3 c = n_out3p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		float max3 = max(max1, max2);
		n_out9p0 = vec3(max3, max3, max3);
	}

// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out2p1;

}

void light() {
// Output:0

}
"
custom_defines = ""
graph_offset = Vector2( 71, 66 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 860, 200 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -400, 200 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 340, 120 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( -360, 60 )
nodes/fragment/7/node = SubResource( 4 )
nodes/fragment/7/position = Vector2( -600, 80 )
nodes/fragment/8/node = SubResource( 5 )
nodes/fragment/8/position = Vector2( 20, 40 )
nodes/fragment/9/node = SubResource( 6 )
nodes/fragment/9/position = Vector2( 580, 160 )
nodes/fragment/connections = PoolIntArray( 2, 1, 0, 1, 2, 0, 3, 1, 7, 0, 5, 0, 5, 0, 8, 1, 8, 0, 3, 0, 3, 0, 9, 0, 9, 0, 0, 0 )

[resource]
shader = SubResource( 7 )
