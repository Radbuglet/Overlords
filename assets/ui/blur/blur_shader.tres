[gd_resource type="VisualShader" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "color"

[sub_resource type="VisualShaderNodeVectorOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=3]
source = 1

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeScalarUniform" id=5]
uniform_name = "LOD"

[resource]
code = "shader_type canvas_item;
uniform float LOD;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = COLOR.rgb;

// Input:5
	vec3 n_out5p0 = vec3(SCREEN_UV, 0.0);

// ScalarUniform:7
	float n_out7p0 = LOD;

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = textureLod(SCREEN_TEXTURE, n_out5p0.xy, n_out7p0);
		n_out4p0 = _tex_read.rgb;
		n_out4p1 = _tex_read.a;
	}

// VectorOp:3
	vec3 n_out3p0 = n_out2p0 * n_out4p0;

// Output:0
	COLOR.rgb = n_out3p0;

}

void light() {
// Output:0

}
"
custom_defines = ""
graph_offset = Vector2( -649, -174.25 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -200, 140 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 40, 200 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -220, 300 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -480, 300 )
nodes/fragment/7/node = SubResource( 5 )
nodes/fragment/7/position = Vector2( -460, 400 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 3, 1, 5, 0, 4, 0, 3, 0, 0, 0, 7, 0, 4, 1 )
